<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Home</title><link></link><description></description><pubDate>Wed, 25 Jun 2025 00:00:00 GMT</pubDate><lastBuildDate>Wed, 25 Jun 2025 12:08:31 GMT</lastBuildDate><generator>marmite</generator><item><title>Aprendendo Rust em 2025 e seus mitos</title><link>/aprendendo-rust-em-2025-e-seus-mitos.html</link><description><![CDATA["Aprendendo Rust do zero - Removendo mitos e ajudando a começar"]]></description><guid>/aprendendo-rust-em-2025-e-seus-mitos.html</guid><pubDate>Wed, 25 Jun 2025 00:00:00 GMT</pubDate><source url="">archive-2025</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p><a href="https://www.youtube.com/watch?v=STMPnPRrv8k">Veja também em vídeo</a></p>
<p>Bom nesse breve texto quero falar um pouco sobre como aprender rust, além de tirar alguns mitos.</p>
<p>Rust é uma linguagem muito legal, uso ela em alguns projetos além de usar ela no jogo que estou desenvolvendo, hoje falando com algumas pessoas percebo alguns obstáculos que se coloca para aprender rust e gostaria de ajudar a clarear um pouco.</p>
<h2><a href="#mitos" aria-hidden="true" class="anchor" id="mitos"></a>Mitos:</h2>
<p><strong>Aprender C/C++:</strong> Além de que se você souber a linguagem seja algo que te ajude, não é algo mandatório para aprender Rust, tem muita gente na comunidade que tem esse background.</p>
<p>**Saber estrutura de dados e algortimos: **Também é um conhecimento importante pra se tornar um programador melhor, porém não é mandatório.</p>
<p>**Saber design partterns: **Esse eu vejo as pessoas muito obsecadas pelo livro da Gang of 4 mas, sinceramente é algo que você deve estudar depois de já ter certo conhecimento em qualquer linguagem, além de que algumas linguagens resolvem os patterns de outras formas.</p>
<p><strong>Aprender ponteiros:</strong> Como disse tem pessoas de outros backgrounds, e conforme você aprende Rust você vai identificando como a mémoria é alocada e suas referências e isso pode até te levar aprender como funcionam os ponteiros em c/C++ por exemplo, mas não é mandatório.</p>
<p><strong>Aprender Rust por que não quer aprender ponteiros:</strong> como disse tem pessoas na comunidade com background em C/C++ e que continuam trabalhando nessas linguagens, inclusive usam-se Rust hoje no desenvolvimento do kernel Linux, não vejo essas pessoas que trabalham lá usando Rust por que simplesmente não querem aprender ponteiros.</p>
<p><strong>Então nada disso é importante?</strong>
Como falei coisas que citei anteriormente podem ser importantes para se tornar um programador melhor (como algorimo e estrutura de dados), porém se você está aprendendo a linguagem não é mandatório, com o tempo você vai incluindo isso no seu plano de estudos.</p>
<p>Bom tirando os mitos como você pode aprender rust? Vou dar algumas dicas para você começar a estudar.
<strong>Pra quem está iniciando</strong>: Pensando em mercado de trabalho é interessante conhecer outra linguagem, e disso isso não por que o Rust é dificil, mas por que pensando em trabalhar com a linguagem, normalmente vão pedir que você tenha conhecimento em outra linguagem.</p>
<p><strong>Conhecimento gradual:</strong> Penso que assim como no vim o Rust (e na real qualquer outra linguagem) você precisa de consistência, não adianta estudar 40 horas uma semana e depois ficar 1 mês sem estudar. O importante mesmo que seja pouco tempo que seja constante, assim você vai conseguindo aprender de forma graudal.</p>
<h2><a href="#então-como-aprender-" aria-hidden="true" class="anchor" id="então-como-aprender-"></a>Então como aprender ?</h2>
<p><strong>Restringindo o material:</strong> Como sempre falo, não adianta comprar 10 livros e 5 cursos se você está inciando na linguagem, isso vai mais atrapalhar que ajudar, a principio use apenas um material e com o tempo conforme já vai tendo conhecimento aumente o seu conteúdo.
Aqui algumas sugestões de materiais gratuitos pra começar:</p>
<p><strong>Documentação do Rust</strong>
<a href="https://rust.sh">https://rust.sh</a>
<a href="https://livro.rustbr.org/">https://livro.rustbr.org/</a>  - Pt_Bt</p>
<h3><a href="#praticar---não-adianta-só-ler" aria-hidden="true" class="anchor" id="praticar---não-adianta-só-ler"></a>Praticar - não adianta só ler</h3>
<p>Não leia um livro técnico como um romance e nem assista um curso como netflix, sempre tente refazer os exemplos e fazer exercícios do tópico que está aprendendo com isso você vai conseguir fixar os conceitos.</p>
<h3><a href="#onde-posso-praticar-em-qualquer-lugar" aria-hidden="true" class="anchor" id="onde-posso-praticar-em-qualquer-lugar"></a>Onde posso praticar em qualquer lugar?</h3>
<p>Rust playground pra mim é uma ótima ferramenta pra quem ta começando pois você pode usar seja no computador quanto no celular.</p>
<p><a href="http://play.rust-lang.org/">http://play.rust-lang.org/</a></p>
<h2><a href="#como-me-preparar-para-estudar" aria-hidden="true" class="anchor" id="como-me-preparar-para-estudar"></a>Como me preparar para estudar?</h2>
<p><strong>Tempo e ambiente pra estudos:</strong> Defina um tempo na sua semana (ela pode variar durante a semana) e foque em estudar, tenha um ambiente onde você consiga definir como local de estudo, se tem barulho tente um fone para rudizir ruidos, se muito silêncio te atrapalha tente ruido branco, procure apenas deixar o ambiente proprio para focar.</p>
<p><strong>Um computador:</strong> Além de acreditar que da pra fazer muitas coisas com o celular, mas em algum momento você vai precisar de um computador, e pode ser um computador antigo o importante na minha visão é ser pelo menos com um processador de 64bits e ter pelo menos uns 2Gb de memória.</p>
<p><strong>Linux, Mas ou Windows?:</strong> Sinceramente pra mim é uma questão de gosto o Rust roda em todos esses sistemas, só diria que se seu computador for antigo e sem muitos recursos o linux funcionaria melhor com uma distribuição mais focada nesse nicho.</p>
<p><strong>Instalar linguagem:</strong> Linux e Mac da pra insalar usando o script da página da linguagem e com o windows você vai precisar usar algo como chocolately ou wsl2.</p>
<p><strong>Faça Exercícios:</strong> Isso é muito importante sempre pratique o que está aprendendo e se precisar de uma dica de site sempre recomendo o <a href="https://exercism.io">exercism</a></p>
<p><strong>Expandindo material:</strong> Você já conseguiu um conhecimento básico da linguagem? Já consegue fazer pequenos projeto? Então pode tentar buscar novos livros e cursos para aprofundar em algum tópico.
O que eu recomendo
Livros:
<a href="https://amzn.to/3Whg1VN">Hands on Rust - Inglês</a>
<a href="https://amzn.to/4cTG2zT">Programming Rust - Inglês</a>
<a href="https://amzn.to/4cYbqgJ">Rust: Concorrência e alta performance com segurança</a>
<a href="https://amzn.to/3Weo7yq">Programação Funcional e Concorrente em Rust</a></p>
<p>Curso
<a href="https://hackerspace.jonatasoliveira.dev/courses-page/rust-logica-com-jogos/">Meu curso de rust</a>
<a href="https://www.udemy.com/course/ultimate-rust-crash-course/?couponCode=ST9MT71624">Ultimate Rust Crash Course - Inglês</a></p>
<p>Caso tenha gostado do artigo eu elaboro um pouco mais ele no meu vídeo não deixe de dar uma conferida.
<a href="https://youtu.be/STMPnPRrv8k">https://youtu.be/STMPnPRrv8k</a></p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Como melhorar suas queries no SQLAlchemy com column_property</title><link>/como-melhorar-suas-queries-no-sqlalchemy-com-column-property.html</link><description><![CDATA["Como melhorar suas queries no SQLAlchemy usando column_property."]]></description><guid>/como-melhorar-suas-queries-no-sqlalchemy-com-column-property.html</guid><pubDate>Mon, 16 Jun 2025 00:00:00 GMT</pubDate><source url="">archive-2025</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>Bom hoje quero falar com vocês uma coisa que fiz recentemente para facilitar algumas coisas <a href="https://github.com/jonatasoli/fast-ecommerce-back/">no meu e-commerce open source</a>.</p>
<p>Para entender o cenário eu tenho as tabelas a ProductDB, InventoryDB e CategoryDB onde:</p>
<p>CategoryDB tem as categorias onde um produto só pode ter uma categoria</p>
<p>InventoryDB é onde fica registrado o estoque num formato de &quot;extrato&quot; onde pode ser adicionado ou removido estoque de um produto.</p>
<p>Um produto pode ter várias entradas em InventoryDB seja de entrada ou saída.</p>
<p>Então para criar uma query onde eu preciso retornar uma lista de produtos com sua categoria e a quantidade pode ser algo não muito trivial se você quiser tentar resolver tudo isso na query como abaixo:</p>
<pre><code class="language-python"> with (db):
        category_alias = aliased(CategoryDB)
        products = (
            select(
                ProductDB.product_id,
                ProductDB.name,
                ProductDB.uri,
                ProductDB.price,
                ProductDB.active,
                ProductDB.direct_sales,
                ProductDB.description,
                ProductDB.image_path,
                ProductDB.installments_config,
                ProductDB.installments_list,
                ProductDB.discount,
                ProductDB.category_id,
                ProductDB.showcase,
                ProductDB.feature,
                ProductDB.show_discount,
                ProductDB.height,
                ProductDB.width,
                ProductDB.weight,
                ProductDB.length,
                ProductDB.diameter,
                ProductDB.sku,
                ProductDB.currency,
                func.coalesce(func.sum(InventoryDB.quantity), 0).label(
                    'quantity',
                ),
                category_alias.category_id.label('category_id_1'),
                category_alias.name.label('name_1'),
                category_alias.path,
                category_alias.menu,
                category_alias.showcase.label('showcase_1'),
                category_alias.image_path.label('image_path_1'),
            )
            .where(
                ProductDB.name.ilike(f'%{search}%'),
            )
            .outerjoin(
                InventoryDB,
                InventoryDB.product_id == ProductDB.product_id,
            )
            .join(
                category_alias,
                ProductDB.category_id == category_alias.category_id,
            )
            .group_by(ProductDB.product_id, category_alias.category_id)
        )
        products = db.execute(products)
    products_list = []

    keys = products.keys()
    for product in products:
        product_dict = dict(zip(keys, product))
        if 'category_id_1' in product_dict:
            product_dict['category'] = {
                'category_id': product_dict['category_id_1'],
                'name': product_dict['name_1'],
                'path': product_dict['path'],
                'menu': product_dict['menu'],
                'showcase': product_dict['showcase_1'],
                'image_path': product_dict['image_path_1'],
            }
            del product_dict['category_id_1']
            del product_dict['name_1']
            del product_dict['path']
            del product_dict['menu']
            del product_dict['showcase_1']
            del product_dict['image_path_1']
        products_list.append(ProductCategoryInDB.model_validate(product_dict)) 
</code></pre>
<p>Veja que uso o pydantic como modelo para retornar para minha API e nesse formato tenho alguns problemas.</p>
<p>Eu preciso passar minha categoria pois, nos meus testes locais aqui ele não retornava as colunas de column mesmo que ele estivesse mapeado o relacionamento na minha tabela:</p>
<pre><code class="language-python">class ProductDB(Base):
    __tablename__ = 'product'

    product_id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]
    uri: Mapped[str]
    price: Mapped[Decimal]
    active: Mapped[bool] = mapped_column(default=False)
    direct_sales: Mapped[bool] = mapped_column(default=False)
    description: Mapped[Json] = mapped_column(JSON, nullable=True)
    image_path: Mapped[str | None]
    installments_config: Mapped[int]
    installments_list: Mapped[dict] = mapped_column(JSON, nullable=True)
    discount: Mapped[int | None]
    category_id: Mapped[int] = mapped_column(
        ForeignKey('category.category_id'),
    )
    category: Mapped['CategoryDB'] = relationship(
        foreign_keys=[category_id],
        backref='ProductDB',
        cascade='all,delete',
        uselist=False,
        lazy='joined',
    )
    inventory = relationship(
        'InventoryDB',
        backref=backref('ProductDB', uselist=False),
        cascade='all,delete',
        foreign_keys=[product_id],
        primaryjoin='ProductDB.product_id == InventoryDB.product_id',
    )
    showcase: Mapped[bool] = mapped_column(default=False)
    feature: Mapped[bool] = mapped_column(default=False, server_default='0')
    show_discount: Mapped[bool] = mapped_column(default=False)
    height: Mapped[Decimal | None]
    width: Mapped[Decimal | None]
    weight: Mapped[Decimal | None]
    length: Mapped[Decimal | None]
    diameter: Mapped[Decimal | None]
    sku: Mapped[str]
    currency: Mapped[str] = mapped_column(default='BRL') 
</code></pre>
<p>Então por que isso acontece?</p>
<p>Se eu tentar executar minha query usando algo como db.scalars.all() como o objeto não está mapeando da model ele me voltar uma tupla, com isso preciso pegar essa tupla e fazer o mapeamento na mão da tabela category e além disso eu tenho o trecho abaixo para calcular a quantidade.</p>
<pre><code class="language-python">func.coalesce(func.sum(InventoryDB.quantity), 0).label(
                    'quantity',
                ),
</code></pre>
<p>E justamente esse campo calculado me impedia de mapear usando <code>db.scalars().all()</code> que me ajudaria a montar mais facilmente o objeto no pydantic usando um adapter.</p>
<p>Olhando pra isso acreditava que teria uma forma mais facil de resolver isso e ela existe que é a column_property.</p>
<p><em>column_property</em> é uma maneira de definir atributos em seus modelos que são calculados a partir de expressões SQL, em vez de serem armazenados diretamente no banco de dados. Pense neles como &quot;colunas virtuais&quot; que existem apenas quando você consulta seu modelo.</p>
<p>Falando de forma mais simplista, eu consigo criar um campo calculado direto na minha model como fosse a função de soma e como está na model eu consigo criar um objeto do ORM que facilita a conversão pro modelo do pydantic.</p>
<p>A model ficaria assim:</p>
<pre><code class="language-python">class ProductDB(Base):
    __tablename__ = 'product'

    product_id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str]
    uri: Mapped[str]
    price: Mapped[Decimal]
    active: Mapped[bool] = mapped_column(default=False)
    direct_sales: Mapped[bool] = mapped_column(default=False)
    description: Mapped[Json] = mapped_column(JSON, nullable=True)
    image_path: Mapped[str | None]
    installments_config: Mapped[int]
    installments_list: Mapped[dict] = mapped_column(JSON, nullable=True)
    discount: Mapped[int | None]
    category_id: Mapped[int] = mapped_column(
        ForeignKey('category.category_id'),
    )
    category: Mapped['CategoryDB'] = relationship(
        foreign_keys=[category_id],
        backref='products',
        cascade='all,delete',
        uselist=False,
        lazy='joined',
    )
    inventory = relationship(&quot;InventoryDB&quot;, back_populates=&quot;product&quot;)
    showcase: Mapped[bool] = mapped_column(default=False)
    feature: Mapped[bool] = mapped_column(default=False, server_default='0')
    show_discount: Mapped[bool] = mapped_column(default=False)
    height: Mapped[Decimal | None]
    width: Mapped[Decimal | None]
    weight: Mapped[Decimal | None]
    length: Mapped[Decimal | None]
    diameter: Mapped[Decimal | None]
    sku: Mapped[str]
    currency: Mapped[str] = mapped_column(default='BRL')

    quantity = column_property(
        select(func.coalesce(func.sum(InventoryDB.quantity), 0))
        .where(InventoryDB.product_id == product_id)
        .correlate_except(InventoryDB) 
        .scalar_subquery(),
    ) 
</code></pre>
<p>Ai crio um novo atributo como column property e faço uma query dentro dele com a soma.</p>
<p>Assim consigo simplificar a minha query para ficar assim:</p>
<pre><code class="language-python"> async with db().begin() as transaction:
        products = (
            select(ProductDB)
            .where(ProductDB.active == True)
            .order_by(ProductDB.product_id.asc())
        )
 
        result = await transaction.session.execute(products)
        adapter = TypeAdapter(List[ProductCategoryInDB])
        products_list = result.scalars().all()
        products_list = adapter.validate_python(products_list) 
</code></pre>
<p>Ai uso um TypeAdapter já com o tipo de retorno que preciso e retiro aquele loop para montar o objeto na mão e tenho tudo já retornando automagicamente.</p>
<p>Assim quantity é uma coluna lazy ou seja cada vez que for chamar quantity no meu objeto products_list ele vai rodar uma subquery. Esse é o preço que vou pagar aqui, pois ao invés de já calcular esse campo diretamente na minha query principal e só acessar quantity toda vez que chamar a coluna de alguma dessas linhas ele vai rodar a query da quantidade.</p>
<p>Num cenário com muitas linhas isso pode criar um gargalo, porém como a versão real dessa query eu uso paginação é um ônus pequeno e que vai cair principalmente no banco de dados mas, não creio que vá deteriorar meu banco e em contra-partida eu consigo ter uma query mais simples e evito laços direamente em python e uso todo o poder do pydantic.</p>
<p>Bom espero que isso te ajude nos seus desafio com SQLAlchemy e Pydantic!</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>Deploy flask application with subdomain on Heroku</title><link>/deploy-flask-application-with-subdomain-on-heroku.html</link><description><![CDATA["As ferramentas que estou usando no meu workflow de trabalho"]]></description><guid>/deploy-flask-application-with-subdomain-on-heroku.html</guid><pubDate>Wed, 11 Jun 2025 00:00:00 GMT</pubDate><source url="">archive-2025</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<p>Hello, I made a very detailed guide on how I uploaded an example project using Heroku and Cloudflare, I hope I can help you.</p>
<p>As a first step, let's create our project folder:</p>
<pre><code class="language-shell">mkdir flask_example
</code></pre>
<p>In this example, we are going to use poetry to manage dependencies and for that, we need to install it via pip.</p>
<pre><code class="language-shell">pip install poetry
</code></pre>
<p>Let's do the <code>poetry init</code> command to start our configuration, in this case, let's just follow its default configuration, as below:</p>
<pre><code class="language-shell">❯ poetry init

This command will guide you through creating your pyproject.toml config.

Package name [flask_example]:  
Version [0.1.0]:  
Description []:  
Author [Jonatas Oliveira &lt;contact@jonatasoliveira.dev&gt;, n to skip]:  
License []:  
Compatible Python versions [^3.13]:  

Would you like to define your main dependencies interactively? (yes/no) [yes] 
You can specify a package in the following forms:
  - A single name (requests): this will search for matches on PyPI
  - A name and a constraint (requests@^2.23.0)
  - A git url (git+https://github.com/python-poetry/poetry.git)
  - A git url with a revision (git+https://github.com/python-poetry/poetry.git#develop)
  - A file path (../my-package/my-package.whl)
  - A directory (../my-package/)
  - A url (https://example.com/packages/my-package-0.1.0.tar.gz)

Package to add or search for (leave blank to skip): 

Would you like to define your development dependencies interactively? (yes/no) [yes] 
Package to add or search for (leave blank to skip): 

Generated file

[tool.poetry]
name = &quot;flask-example&quot;
version = &quot;0.1.0&quot;
description = &quot;&quot;
authors = [&quot;Jonatas Oliveira &lt;contact@jonatasoliveira.dev&gt;&quot;]
readme = &quot;README.md&quot;
packages = [{include = &quot;flask_example&quot;}]

[tool.poetry.dependencies]
python = &quot;^3.13&quot;


[build-system]
requires = [&quot;poetry-core&quot;]
build-backend = &quot;poetry.core.masonry.api&quot;
</code></pre>
<p>Now let's install the minimal packages for this example.</p>
<pre><code class="language-shell">poetry add flask python-decouple python-dotenv gunicorn
</code></pre>
<p>Now we create the default directories for static and templates, this example we not use, but is good use with reference.</p>
<pre><code class="language-shell">mkdir static template
</code></pre>
<p>Now let's create the default directories for static and template, in this example, we won't use them, it's more to use as a reference.</p>
<pre><code class="language-shell">touch config.py app.py main.py
</code></pre>
<p>Now let's enter the shell and create the main.py file.</p>
<pre><code class="language-python">import locale

from flask import Flask

import config as default_config


def create_app(config=None) -&gt; Flask:
    locale.setlocale(locale.LC_ALL, &quot;pt_BR.UTF-8&quot;)  # set locale
    app = Flask(__name__, static_folder=&quot;../static&quot;, template_folder=&quot;../templates&quot;)
    if config is None:
        config = default_config
    app.config.from_object(config)
    return app

</code></pre>
<p>Here I'm already using the flask's config template in a separate file, which isn't the simplest way to get started but is best for a project that expects to grow.</p>
<pre><code class="language-python">def create_app(config=None) -&gt; Flask:
</code></pre>
<p>Here we define our create_app function which is basically our app flask initialization function.</p>
<pre><code class="language-python">app = Flask(__name__, static_folder=&quot;../static&quot;, template_folder=&quot;../templates&quot;)
</code></pre>
<p>Here I set the flask app and define the static_folder and the template_folder, in the API projects these settings can be optional.</p>
<pre><code class="language-python">    if config is None:
        config = default_config
    app.config.from_object(config)
</code></pre>
<p>Here we configure the import of the config for the project, we could set the config directly in create_app but it is more organized to use a file just for organization.
As a parameter of create_app, we put config, in this case, it is set to none by default, this is especially important for testing, where we can configure an exclusive config for testing or if we want to separate the production config. So when calling the app we can pass the config we want.</p>
<pre><code class="language-pyhton">    return app
</code></pre>
<p>Finally, we return the app we want.
For now, nothing works, but let's now create our default route using a blueprint.</p>
<p>Let's create the root_blueprint.py file,</p>
<pre><code class="language-python">from flask import Blueprint

main_blueprint = Blueprint('Main Blueprint with root domain', __name__)

@main_blueprint.route('/')
def index():
    return &quot;This is a main blueprint&quot;

</code></pre>
<p>where:</p>
<pre><code class="language-python">from flask import Blueprint

main_blueprint = Blueprint('Root route', __name__)
</code></pre>
<p>Here we import the Blueprint and define it as a description.</p>
<pre><code class="language-python">@main_blueprint.route('/')
def index():
    return &quot;This is a main blueprint&quot;
</code></pre>
<p>Here we create our default route in &quot;/&quot; which is the root of the project.</p>
<p>Now let's register our blueprint in main.py</p>
<pre><code class="language-python">    # Blueprints and API Namespaces
    from root_blueprint import main_blueprint
    app.register_blueprint(main_blueprint)
</code></pre>
<p>Let's create the app.py file so we can start our flask application using it.</p>
<pre><code class="language-python">from main import create_app

app = create_app()
</code></pre>
<p>Now let's run our application by first starting the venv with poetry then let's set it to start in debug mode and run the flask.</p>
<pre><code class="language-shell">poetry shell
export FLASK_DEBUG true
flask run
</code></pre>
<p>Run with localhost and see the message below appear:
<figure><img src="media/post-images/flask-domain-main-blueprint.png" alt="Photo" /></figure></p>
<p>Now let's configure the subdomain in the local environment.
Go to /etc/hosts and configure our domain and subdomain, it is important to try to use a non-valid domain on the internet because if, for example, you use google.com instead of directing you to the search engine, you will be directed to your address local, in this case, we will use mydomain as the domain.</p>
<pre><code class="language-sudo">...
127.0.0.1    subdomain.mydomain mydomain
</code></pre>
<p>Now let's create the blueprint subdomain_blueprint.py</p>
<pre><code class="language-python">from flask import Blueprint

sub_blueprint = Blueprint('Subdomain route', __name__)

@sub_blueprint.route('/', subdomain='subdomain')
def index():
    return &quot;This is a subdomain blueprint&quot;

</code></pre>
<p>Note that in the blueprint decorator, we added <code>subdomain='subdomain'</code> which serves to indicate the subdomain that will be used.</p>
<p>Now in main.py let's register the blueprint</p>
<pre><code class="language-python">    from sub_blueprint import sub_blueprint
    app.register_blueprint(sub_blueprint)
</code></pre>
<p>Now we need to configure our config.py to be able to recognize our locally created domain.</p>
<pre><code class="language-python">from decouple import config

SERVER_NAME = config('SERVER_NAME')
</code></pre>
<p>Basically, we are going to use the python decouple lib so we can dynamically configure the SERVER_NAME.
Because of this, we will need to create a .env file with the name SERVER_NAME (it is important to put the .env in .gitignore as it cannot be uploaded to your repository)</p>
<pre><code class="language-python">SERVER_NAME=mydomain:5000
</code></pre>
<p>now let's test the domain and subdomain in the browser.
<figure><img src="media/post-images/flask-domain-main-blueprint.png" alt="Photo" /></figure></p>
<p><figure><img src="media/post-images/flask-domain-subdomain.png" alt="Photo" /></figure></p>
<p>Now let's upload this project to git and place the .env in .gitignore</p>
<pre><code class="language-shell">echo '.env' &gt; .gitignore
echo 'venv'  &gt;&gt; .gitignore
echo '__py_cache__' &gt;&gt; .gitignore
git add .
git commit -m &quot; initial commit&quot;
git push origin main
</code></pre>
<p>Go to namecheap and hire a domain following the site's standard procedure.
<figure><img src="media/post-images/flask-domain-manage-dns.png" alt="Photo" /></figure></p>
<p>With the domain purchased, we will register it at Cloudflare by first adding the domain name and clicking on &quot;Add a Site&quot;.
<figure><img src="media/post-images/flask-domain-cloudflare-1.png" alt="Photo" /></figure>
<figure><img src="media/post-images/flask-domain-cloudflare-2.png" alt="Photo" /></figure>
<figure><img src="media/post-images/flask-domain-cloudflare-3.png" alt="Photo" /></figure>
<figure><img src="media/post-images/flask-domain-cloudflare-4.png" alt="Photo" /></figure>
<figure><img src="media/post-images/flask-domain-cloudflare-5.png" alt="Photo" /></figure></p>
<p>With the nameservers in hand, let's add it to NameCheap.
<figure><img src="media/post-images/flask-domain-namecheap-1.png" alt="Photo" /></figure>
<figure><img src="media/post-images/flask-domain-namecheap-2.png" alt="Photo" /></figure>
<figure><img src="media/post-images/flask-domain-namecheap-3.png" alt="Photo" /></figure></p>
<p>Now we go config Heroku.</p>
<p>It is necessary to <a href="https://signup.heroku.com/">create a Heroku account</a> before continuing, creating the account we will log in and add the app by clicking on create a new app.</p>
<div class="markdown-alert markdown-alert-warning">
<p class="markdown-alert-title">For create app</p>
<p>You must first register a credit card on Heroku before proceeding, as there are no more paid plans now.</p>
</div>
<p>In the first step, put a name for your app and choose the region, then click on Create App.
<figure><img src="media/post-images/flask-domain-heroku-1.png" alt="Photo" /></figure></p>
<p>On the next screen, we will choose the <a href="https://devcenter.heroku.com/articles/heroku-cli">heroku cli</a> option to upload our application.</p>
<p>&gt;[info] GitHub use
&gt;For this example, we are going to use the Heroku CLI as it is the simplest method, but I strongly recommend making a pipeline using Git Hub, and if you need to know how to install the Heroku CLI, just follow the [instructions on the Heroku website](https ://devcenter.heroku.com/articles/heroku-cli), if you are using Linux I recommend using the tarball.</p>
<p>Before we continue to configure the CLI, let's put the requirements file, which Heroku will identify to deploy, as we use poetry, we need to export the file.</p>
<pre><code class="language-bash">poetry export -f requirements.txt --output requirements.txt
</code></pre>
<p>Let's also create the Procfile so we can start our app using the app.py from the flask with gunicorn.</p>
<pre><code class="language-shell">web: gunicorn app:app
</code></pre>
<p>Now let's configure the environment variable so that Heroku identifies the name of the server you want to use in my case I'm going to use myfinances.guru.
So let's click on Settings and then on Reveals Config Vars.
<figure><img src="media/post-images/flask-domain-heroku-2.png" alt="Photo" /></figure>
<figure><img src="media/post-images/flask-domain-heroku-3.png" alt="Photo" /></figure>
In the KEY field, we will put <code>SERVER_NAME</code> and in value, we will put the domain which in my case is <code>myfinances.guru</code>
<figure><img src="media/post-images/flask-domain-heroku-4.png" alt="Photo" /></figure>
Then just click on Add and in the sequence we will deploy.</p>
<p>To start the Heroku CLI, let's log in using the command below:</p>
<pre><code class="language-shell">heroku login
</code></pre>
<p>It will display a link with a login page in your browser, so just copy and paste and follow the login procedure after you're done just go back to the terminal.</p>
<p>Let's add the latest changes to our main branch:</p>
<pre><code class="language-shell">git add .
git commit -m &quot;chore: add deploy configs&quot;
git push origin main
</code></pre>
<p>Adding a remote for Heroku, in your app the configuration line will appear in my case it is the line below in your case it will be another line:</p>
<pre><code class="language-shell">heroku git:remote -a example-subdomain-jonatas
</code></pre>
<p>Now just push to Heroku with the command below:</p>
<pre><code class="language-shell">git push heroku main
</code></pre>
<p>&gt;[info] Which branch to use for push?
&gt;In my case, my branch on Git Hub is main, but on Heroku the example will appear as master, so always put the branch you are using on github.</p>
<p>When the deployment is finished it will display a heroku url for this project, in my case it looked like this:
<code>remote:        https://example-subdomain-jonatas.herokuapp.com/ deployed to Heroku</code></p>
<p>Let's now indicate to Heroku that we are going to use an external subdomain in my case myfinances.guru according to the line below:</p>
<pre><code class="language-shell">heroku domains:add myfinances.guru
</code></pre>
<p>Now with the <code>heroku domain</code> command we verify the target that it will generate to put in the DNS.
<figure><img src="media/post-images/flask-domain-terminal-1.png" alt="Photo" /></figure></p>
<p>Now we also add our subdomain:</p>
<pre><code class="language-shell">heroku domains:add subdomain.myfinances.guru
</code></pre>
<p>It will generate another target to be placed on CloudFlare.</p>
<p>Now we need to go to Cloudflare and configure this URL using CNAME, in my case it will look like the image below:
<figure><img src="media/post-images/flask-domain-cloudflare-6.png" alt="Photo" /></figure></p>
<p>Now we need to wait a few minutes to propagate the DNS, but once the propagation is complete we can test our application using the domain.
<figure><img src="media/post-images/flask-domain-route-main-domain.png" alt="Photo" /></figure>
<figure><img src="media/post-images/flask-domain-route-subdomain.png" alt="Photo" /></figure></p>
<p>With that I close this guide, if you need any other information please let me know.</p>
<ul>
<li></li>
</ul>
<h2><a href="#references" aria-hidden="true" class="anchor" id="references"></a>References</h2>
<ul>
<li><a href="https://developers.cloudflare.com/">CloudFlare Documentation</a></li>
<li><a href="https://devcenter.heroku.com/categories/reference">Heroku Documentation</a></li>
</ul>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item><item><title>30 dias usando Helix</title><link>/30-dias-usando-helix.html</link><description><![CDATA["Me desafiei a aprender a usar o editor Helix por 30 dias!"]]></description><guid>/30-dias-usando-helix.html</guid><pubDate>Mon, 09 Jun 2025 00:00:00 GMT</pubDate><source url="">archive-2025</source><content:encoded><![CDATA[<!-- Content Injected to every content markdown header -->
<h3><a href="#veja-também-no-youtube" aria-hidden="true" class="anchor" id="veja-também-no-youtube"></a><a href="https://www.youtube.com/watch?v=MURMkIlCHRg&amp;t">Veja também no Youtube</a></h3>
<p>Olá gente, estou esse mês me desafiando a usar o <a href="https://helix-editor.com/">helix</a> que é um editor baseado em rust por 30 dias.
Só pra contextualizar, eu uso vim/neovim a um bom tempo e eu estou montando um material de como configurar o neovim do zero, nesse meio tempo tenho que continuar trabalhando, e eu decidi não usar uma vm pra ir configurando em paralelo enquanto minha config estável contuasse me atendendo. Então resolvi testar um editor novo que é em algumas partes inspirado no vim/neovim pra ir usando.</p>
<h2><a href="#helix" aria-hidden="true" class="anchor" id="helix"></a>Helix</h2>
<p>É um projeto feio em rust e tem como principais features, melhorar a parte de multicursos relacionado ao vim/neovim além de já ter uma configuração lsp pronta pra uso, quase como um mason do neovim só que ele em si não instala os server só detecta os mesmos.</p>
<h2><a href="#alguns-desafios" aria-hidden="true" class="anchor" id="alguns-desafios"></a>Alguns desafios</h2>
<p>Bom primeira coisa que acaba confundindo um pouco é que eu tenho alguns atalhos próprios no neovim e além de ele ter por padrão alguns atalhos estou precisando reaprender a usar do modo dele, uma coisa que é dificil pra mim é desapegar um pouco de algumas formas de navegar do neovim e usar ai fiz no meu obsidian um mapa dos principais atalhos que compartilho com vocês abaixo:
<a href="helix-shortcuts.html" data-wikilink="true">Helix Shortcuts</a></p>
<pre><code>`Ctrl`+`,` | Abre a caixa de diálogo de configurações.
`Ctrl`+`Shift`+`,` | Salva as configurações atuais.
`Ctrl`+`P` | Abre o painel de pesquisa.
`Ctrl`+`B` | Abre a barra lateral.
`Ctrl`+`F` | Abre a barra de pesquisa do editor.
`Ctrl`+`E` | Abre a barra de navegação.
`Ctrl`+`T` | Abre uma nova guia.
`Ctrl`+`W` | Fecha a guia atual.
`Ctrl`+`Shift`+`W` | Fecha todas as guias.
`Ctrl`+`J` | Desloca para baixo uma linha.
`Ctrl`+`K` | Desloca para cima uma linha.
`Ctrl`+`H` | Apaga a palavra anterior.
`Ctrl`+`D` | Apaga a letra anterior.
`Ctrl`+`C` | Copia o texto selecionado.
`Ctrl`+`V` | Cola o texto copiado.
`Ctrl`+`X` | Corta o texto selecionado.
`Ctrl`+`Z` | Desfaz a última alteração.
`Ctrl`+`Y` | Refaz a última alteração.
`Ctrl`+`A` | Seleciona todo o texto.
`Ctrl`+`E` | Move o cursor até o final do texto.
`Ctrl`+`B` | Move o cursor para o início do texto.
`Home` | Move o cursor para o início da linha atual.
`End` | Move o cursor para o fim da linha atual.
`Page Up` | Move o cursor para cima uma página.
`Page Down` | Move o cursor para baixo uma página.
`Left` | Move o cursor para a esquerda.
`Right` | Move o cursor para a direita.
`Up` | Move o cursor para cima.
`Down` | Move o cursor para baixo.
</code></pre>
<h2><a href="#novos-modos" aria-hidden="true" class="anchor" id="novos-modos"></a>Novos modos</h2>
<p>No caso do Helix tem dois modos que estou usando que são bastante importantes, primeiro o modo <em>Space</em> que serve pra navegar entre os arquivos e buffers e o <em>Go To</em> mode que serve pra navegar nos arquivos em si, aqui o principal desafio é que muitas das coisas que estão ali eu já tinha uma forma personalizada de trabalhar no neovim, então estou com o trabalho de reaprender os atalhos até ver na <a href="https://docs.helix-editor.com/">documentação</a> se tem alguma forma de personalizar esses comandos para os que eu já estava usando.</p>
<h2><a href="#config" aria-hidden="true" class="anchor" id="config"></a>Config</h2>
<p>A configuração usa um arquivo .toml e é bem simples de trabalhar com ele vou mostrar as configurações que você configura no .config/helix/config.toml</p>
<pre><code class="language-toml">theme = &quot;catppuccin_mocha&quot;

[editor]
line-number = &quot;relative&quot;
mouse = false

[editor.statusline]
left = [&quot;mode&quot;, &quot;spinner&quot;]
center = [&quot;file-name&quot;]
right = [&quot;diagnostics&quot;, &quot;selections&quot;, &quot;position&quot;, &quot;file-encoding&quot;, &quot;file-line-ending&quot;, &quot;file-type&quot;]
separator = &quot;│&quot;
mode.normal = &quot;NORMAL&quot;
mode.insert = &quot;INSERT&quot;
mode.select = &quot;SELECT&quot;

[editor.lsp]
enable = true
display-messages = false

[editor.file-picker]
hidden = false

[editor.soft-wrap]
enable = true
max-wrap = 25 # increase value to reduce forced mid-word wrapping
max-indent-retain = 0
wrap-indicator = &quot;&quot;  # set wrap-indicator to &quot;&quot; to hide it

</code></pre>
<p>Uma coisa legal ele já consegue pegar vários temas por default e é só passar o nome do tema.
Na sessão <em>editor</em> eu deixo o número de linhas relativo pois é útil quando você quer pular linhas e desativo a iterção do mouse.
Em <em>editor.statusline</em> eu crio uma linha de status bem simples pra ficar parecida com a que eu usava no neovim.
Em <em>editor.lsp</em> eu habilito o linter e desativo as mensagens de progresso do linter na linha de status.
Em <em>editor.file-picker</em> eu só desativo a opção de esconder arquivos ocultos.
E finalmente me <em>editor.soft-wrap</em> eu habilito algumas opções para fazer a quebra de linha na tela.</p>
<h2><a href="#configuração-dos-linters" aria-hidden="true" class="anchor" id="configuração-dos-linters"></a>Configuração dos linters</h2>
<p>No meu caso eu uso majoritariamente python, typescript e rust como linguagens então precisei configurar globalmente os linters de cada uma das linguagens e preciso chegar usando <code>helix --health</code>pra ver as configurações ou se quero uma linguagem ou framework especifico uso o comando <code>helix --health python</code>por exemplo.</p>
<p>A config das linguagens fica em .config/helix/languages.toml e meu arquivo no momento está assim:</p>
<pre><code>[[language]]
name = &quot;python&quot;
language-servers = [&quot;pyright&quot;, &quot;ruff&quot;]
[language-server.pyright]
command = &quot;pyright-langserver&quot;
args = [&quot;--stdio&quot;]
[language-server.pyright.config.python.analysis]
typeCheckingMode = &quot;basic&quot;
[language-server.ruff]
command = &quot;ruff-lsp&quot;
[language-server.ruff.config.settings]
args = [&quot;--ignore&quot;, &quot;E501&quot;]
[language.formatter]
command = &quot;blue&quot;
args = [&quot;--line-length&quot;, &quot;88&quot;, &quot;--quiet&quot;, &quot;-&quot;]

[[language]]
name = &quot;rust&quot;
[language-server.rust-analyzer.config.check]
command = &quot;clippy&quot;
</code></pre>
<p>Ainda não fiz as configs relativas a typescript, vue, nuxt e svelte por que nesses dias só fiz pequenos ajustes nos projetos que estão usando essa linguagem.
No mais essa config ainda estou aprendendo e ela não está 100% preciso trabalhar um pouco em cima dela ainda.</p>
<h2><a href="#desafios" aria-hidden="true" class="anchor" id="desafios"></a>Desafios</h2>
<p>Bom um dos principais desafios no momento é quando preciso de algo que não está na documentação além de ser até bem abrangente ainda preciso caçar algumas coisas.
Na parte do lsp deu um trabalhinho instalar o linter globalmente e ainda preciso remover algumas coisas que não nele.
Copiar algo do editor e colar por exemplo no navegador no qual estou escrevendo esse artigo não funciona por padrão e ainda não descobri como fazer para habilitar o xclip por exemplo.
Além disso eles possuem um artigo de quem está <a href="https://github.com/helix-editor/helix/wiki/Migrating-from-Vim">migrando do vim</a> que é bem útil pra quem está começando.</p>
<p>Por enquanto é isso e vou atualizando conforme for progredindo aqui.</p>
<h2><a href="#dia-2" aria-hidden="true" class="anchor" id="dia-2"></a>Dia 2</h2>
<h2><a href="#sobre-alguns-desafios-anteriores" aria-hidden="true" class="anchor" id="sobre-alguns-desafios-anteriores"></a>Sobre alguns desafios anteriores</h2>
<p>Bom descobri que tinha um health check pro clipboard</p>
<pre><code class="language-bash">➜ helix --health clipboard
System clipboard provider: wl-paste+wl-copy
</code></pre>
<p>No meu caso uso o wayland ai uso o <em>wl-copy</em> e estava funcionando, acontece que só usando o atalho <code>y</code> ele não copia pro <em>clipboard</em> no caso precisa usar <code>&lt;Space&gt;+y</code>para copia-lo.
Uma coisa que acho meio perigosa no atalho que eles criaram para deletar caracteres com a letra <code>d</code> é que no vim temos um atalho <code>dd</code> que remove a linha inteira isso pode acabar confundindo, principalmente quem já tem a memória muscular pra fazer isso.
Outra coisa meio ruim é que no NeoVIm eu uso muito <code>C+v</code> + um jump para copiar e agora preciso fazer essa sequencia.
<code>v + jump + &lt;Space&gt;+y</code>
antes eu fazia assim
<code>&lt;Shift&gt; + v + jump +y</code>
O espaço no final sempre acaba me pegando, mas acredito que é questão de praticar mais também para se adaptar.
As vezes me confundo também com o <code>a</code> no caso do vim ele entra no mode de inserção no caractere posterior aqui no helix ele pula uma linha e entra no modo de inserção.</p>
<h2><a href="#coisas-legais-que-descobri" aria-hidden="true" class="anchor" id="coisas-legais-que-descobri"></a>Coisas legais que descobri</h2>
<p>Uma coisa legal que penso em levar pro meu Neovim é ele já fechar parenteses, chaves e colchetes automaticamente. Porém quando estou editando o script do meu <a href="https://www.udemy.com/course/rust-da-logica-aos-jogos/?referralCode=C82C9336A8CF938D12E7">curso de rust</a> as vezes da uma dor de cabeça já que estou usando o mkdocs pra trabalhar com ele e alguns marcações não precisam ser fechadas e ele fecha, acredito que deva haver alguma forma de resolver isso só não sei ainda.</p>
<p>Uma coisa lega que descobri que consigo jogar o editor pra background e depois voltar, mais tarde descobri que também conseguia fazer isso com o vim por que na verdade é um comando do shell em si.</p>
<table>
<thead>
<tr>
<th>shortcut</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+z</td>
<td>joga o editor pra background</td>
</tr>
<tr>
<td>fg</td>
<td>volta o editor para primeiro plano</td>
</tr>
</tbody>
</table>
<h2><a href="#sobre-o-lsp" aria-hidden="true" class="anchor" id="sobre-o-lsp"></a>Sobre o LSP</h2>
<p>Precisei hoje instalar os servers de svelte e vue</p>
<pre><code class="language-bash">npm install -g svelte-language-server
npm install -g typescript-svelte-plugin
npm install -g @vue/language-server
npm install -g prettier
</code></pre>
<p>Ai aproveitei e adicionei uma configuração extra no meu languages.toml</p>
<pre><code class="language-toml">[[language]]
name = &quot;vue&quot;
auto-format = true
formatter = { command = &quot;prettier&quot;, args = [&quot;--parser&quot;, &quot;vue&quot;] }
</code></pre>
<p>Um ponto importante é que o helix é dividido em 3 partes</p>
<h2><a href="#language-configuration" aria-hidden="true" class="anchor" id="language-configuration"></a><a href="https://docs.helix-editor.com/guides/adding_languages.html#language-configuration">Language configuration</a></h2>
<p>Nessa sessão fica as configurações especificas que você precisa de uma linguagem e a extensão da mesma.</p>
<h2><a href="#grammar-configuration" aria-hidden="true" class="anchor" id="grammar-configuration"></a><a href="https://docs.helix-editor.com/guides/adding_languages.html#grammar-configuration">Grammar configuration</a></h2>
<p>Se tiver uma configuração do tree-sitter disponível ele vai usar normalmente ele vai usar um caminho padrão, no meu caso eu precisei configurar os linters para funcionarem globalmente para o helix conseguir pegar.</p>
<h2><a href="#queries" aria-hidden="true" class="anchor" id="queries"></a><a href="https://docs.helix-editor.com/guides/adding_languages.html#queries">Queries</a></h2>
<p>As queries na verdade também fazem parte do tree-sitter e elas provem o highlight e a edentação da linguagem.</p>
<p>fora isso é importando atualizar as gramáticas periodicamente.</p>
<pre><code class="language-bash">helix --grammar fetch
helix --grammar build
</code></pre>
<h3><a href="#afinal-o-que-é-lsp" aria-hidden="true" class="anchor" id="afinal-o-que-é-lsp"></a>Afinal o que é LSP</h3>
<p>O Language Server Protocol (LSP) é um protocolo de comunicação usado entre um Editor de Código e um Servidor de Linguagem. Sua principal finalidade é permitir a integração eficiente de funcionalidades de análise de código e ferramentas específicas de linguagem diretamente nos editores de código.</p>
<p><em>Como Funciona:</em></p>
<ul>
<li><strong>Cliente-Server Model:</strong> O LSP segue um modelo cliente-servidor, onde o editor (cliente) se comunica com um servidor específico para uma linguagem de programação.</li>
<li><strong>Comunicação via JSON-RPC:</strong> As mensagens são trocadas entre o cliente e o servidor usando o formato JSON-RPC, o que facilita a implementação em várias linguagens.</li>
</ul>
<p>No nosso caso o helix tem um client LSP e precisamos instalar os servidores para usa-los com ele.</p>
<h3><a href="#afinal-o-que-é-o-tree-sitter" aria-hidden="true" class="anchor" id="afinal-o-que-é-o-tree-sitter"></a>Afinal o que é o Tree-sitter</h3>
<p>O Tree-sitter é um parser de código incremental e gerador de árvores de sintaxe. Ele é projetado para ser eficiente, preciso e capaz de lidar com linguagens de programação complexas.</p>
<p><em>Como Funciona:</em></p>
<ul>
<li><strong>Análise Incremental:</strong> O Tree-sitter realiza análises incrementais, o que significa que, ao modificar o código-fonte, apenas as partes afetadas são reanalisadas, proporcionando uma resposta mais rápida.</li>
<li><strong>Geração de Árvore de Sintaxe:</strong> Ele gera uma árvore de sintaxe para o código-fonte, representando a estrutura hierárquica do mesmo.</li>
</ul>
<p>Ele é muito importante para eu conseguir navegar pelo código através das arvores que ele gera.</p>
<h3><a href="#navegação" aria-hidden="true" class="anchor" id="navegação"></a>Navegação</h3>
<p>Uma coisa nova é a navegação ela tem algumas coisas parecidas com o vim e outras não e precisei fazer uma tabela de navegação para me ajudar a me orientar.</p>
<table>
<thead>
<tr>
<th>shortcut</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>x</td>
<td>seleciona linha</td>
</tr>
<tr>
<td>v</td>
<td>entra no select mode</td>
</tr>
<tr>
<td>C</td>
<td>Seleciono as mesmas palavras com multi-cursor</td>
</tr>
<tr>
<td>s</td>
<td>Se estiver com linhas selecionadas da pra buscar um padrão dentro da seleção para fazer alteração</td>
</tr>
</tbody>
</table>
<h3><a href="#buscas" aria-hidden="true" class="anchor" id="buscas"></a>Buscas</h3>
<table>
<thead>
<tr>
<th>shortcut</th>
<th>descipriton</th>
</tr>
</thead>
<tbody>
<tr>
<td>Space+/</td>
<td>Busca nos arquivos</td>
</tr>
<tr>
<td>Space+f</td>
<td>Busca pelo nome do arquivo</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Uma coisa não muito boa, é que ele ainda não tem uma forma de fazer uma busca dentro dos arquivos, isso é algo que acabo usando muito em projetos grandes então é um ponto ainda pra melhorar. Ele possui uma busca, mas em alguns casos acabou não dando muito certo.</p>
<h3><a href="#dica-extra" aria-hidden="true" class="anchor" id="dica-extra"></a>Dica extra</h3>
<p>Você tem um tutorial bem legal se você é novato em editores como o vim que é o modo tutor dele:</p>
<pre><code class="language-bash">helix --tutor
</code></pre>
<p>É sempre interessante pra quem quer começar olhar esse tutor, no caso do vim também tem e recomendo a todos que olhem.</p>
<h3><a href="#próximos-cápitulos" aria-hidden="true" class="anchor" id="próximos-cápitulos"></a>Próximos cápitulos</h3>
<p>Bom acredito que essa semana foi uma semana pra se adaptar e pensar algumas coisas de modo diferente nesse semana tenho um pouco mais de trabalho planejado com python e svelte então vou explorar um pouco mais o trabalho com os buffers e registradores além das diversas features relacionadas a manipular a seleção de código e multi cursores e dar uma refinada na minha configuração e criar alguns atalhos, então nos vemos na próxima semana.</p>
<h2><a href="#semana-2" aria-hidden="true" class="anchor" id="semana-2"></a>Semana 2</h2>
<p>Bom passamos a semana 2 com o hélix, essa semana com um trabalho mais afundo no editor.</p>
<h3><a href="#criando-atalhos-no-space-mode" aria-hidden="true" class="anchor" id="criando-atalhos-no-space-mode"></a>Criando atalhos no space mode</h3>
<p>Bom sinto falta de alguns atalhos de navegação, como no neovim se usa muito a memoria muscular eu decidi criar alguns atalhos no meu config.toml</p>
<pre><code class="language-toml">[keys.normal.space]
w = &quot;:write&quot; # Salvar buffer com espaço + w
q = &quot;:bc&quot; # Fechar buffer
z = &quot;:bp&quot; # Ir pro próximo buffer
x = &quot;:bn&quot; # Ir pro buffer anterior

</code></pre>
<p>No caso a chave <code>keys.normal.space</code> representa as teclas de ação pra usar no space mode no modo normal.
Ai criei atalhos pra navegar pra frente e para trás nos buffers, fechar um buffer e salvar um buffer, o que fez ajudar muito meu trabalho no dia-a-dia.</p>
<h3><a href="#desafios-1" aria-hidden="true" class="anchor" id="desafios-1"></a>Desafios</h3>
<p>Uma coisa não muito legal que estava me acontecendo é que eu criava uma exception num arquivo em python e quando ia usa-lo o helix não estava identificando para importar.
Descobri que o meu languages.toml não estava funcionando, agora que estava trabalhando num projeto mais focado eu estava vendo que eu olhava o server e aparecia pylsp que é o default e não o pyright + ruff ou mesmo o svelte estava dando um monte de erro, ai percebi que tinha colocado language.toml ao invés de languages.toml então ele não estava usando a minha config ajustei ai começou a funcionar corretamente.</p>
<p>Trabalhei bastante com svelte essa semana e auto format não funcionou direito assim como o auto-complete então vou ter que nas próximas semanas se esforçar um pouco mais.</p>
<h3><a href="#coisas-legais" aria-hidden="true" class="anchor" id="coisas-legais"></a>Coisas Legais</h3>
<p>Melhorando um pouco minha tabela com as navegações que mais uso:</p>
<table>
<thead>
<tr>
<th>shortcut</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>x</td>
<td>seleciona linha</td>
</tr>
<tr>
<td>v</td>
<td>entra no select mode</td>
</tr>
<tr>
<td>C</td>
<td>Seleciono as mesmas palavras com multi-cursor</td>
</tr>
<tr>
<td>s</td>
<td>Se estiver com linhas selecionadas da pra buscar um padrão dentro da seleção para fazer alteração</td>
</tr>
<tr>
<td>[f  ou ]f</td>
<td>pula funções</td>
</tr>
<tr>
<td>[t  ou]t</td>
<td>pula classes</td>
</tr>
</tbody>
</table>
<p>Também os atalhos mais usados no go to mode</p>
<table>
<thead>
<tr>
<th>shortcut</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>d</td>
<td>vai pra definição da função ou classe</td>
</tr>
<tr>
<td>r</td>
<td>vai aonde referencio a função ou classe</td>
</tr>
<tr>
<td>a</td>
<td>vou pro ultimo arquivo acessado</td>
</tr>
<tr>
<td>m</td>
<td>vou pro último arquivo modificado</td>
</tr>
</tbody>
</table>
<p>Outra coisa que uso muito no neovim é mudar o texto dentro de um parenteses ou aspas e aqui existe um modo pra fazer isso é que o match mode usando a tecla <code>m</code>no modo normal.</p>
<table>
<thead>
<tr>
<th>shortcut</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>r</td>
<td>muda o texto no que está dentro do padrão</td>
</tr>
<tr>
<td>d</td>
<td>deleta o que está dentro do padrão</td>
</tr>
<tr>
<td>a</td>
<td>seleciona tudo junto com o padrão</td>
</tr>
<tr>
<td>i</td>
<td>seleciona tudo dentro do padrão</td>
</tr>
</tbody>
</table>
<p>Quando digo o padrão é o <code>() {} [] &quot;&quot; ''</code>
Sendo sincero isso está um pouco difícil de acostumar ainda acho mais funcional o jeito do vim de trabalhar com padrões.</p>
<h3><a href="#concluindo" aria-hidden="true" class="anchor" id="concluindo"></a>Concluindo</h3>
<p>Essa semana trabalhei mais com padrões e melhores mais meu fluxo de trabalho isso me ajudou a ser mais produtivo com a ferramenta.
A parte de desenvolver com svelte não esta sendo muito boa então vou ter que me concentrar em ver qual o problema. No caso por exemplo do nuxtjs ele funcionou bem.</p>
<h2><a href="#semana-3" aria-hidden="true" class="anchor" id="semana-3"></a>Semana 3</h2>
<p>Ola gente compartilhando como foi minha terceira semana, como foi black friday e estava trabalhando num projeto não consegui explorar tanto em expandir meus recursos mais sim em trabalhar com o qie ja conhecia.</p>
<h3><a href="#desafios-2" aria-hidden="true" class="anchor" id="desafios-2"></a>Desafios</h3>
<p>Bom a parte de selecionar código algumas vezes me dava trabalho, por exemplo quando eu queria selecionar todo o arquivo se eu usava o v as vezes não pegava tudo e usando x não me parece uma ideia muito legal e em arquivos grandes se mostra algo não muito inteligente.
Lembrando um chefe meu que usava vim, &quot;tudo no vim da para fazer com dois comandos.&quot;.
Provavelmente não estava fazendo do jeito certo e tem um jeito melhor de fazer.
Outra coisa que sinto falta é uma indicação visual nas tabs, estava com várias tabs abertas, mas não aparecia a tab que eu estava usando  em destaque ai não sabia se estava salvo o buffer ou não e isso as vezes me deu uma dor de cabeça.</p>
<h3><a href="#coisas-legais-1" aria-hidden="true" class="anchor" id="coisas-legais-1"></a>Coisas legais</h3>
<p>É incrível como usar por um tempo um editor você acaba trabalhando bem com seu fluxo. Essa semana eu precisei codar bastante e as coisas começam a ficar mais naturais.
Parte de lint estava funcionando bem assim como as buscas o que ajuda a ficar produtivo, outra coisa que usei bastante foi o multi-cursor que realmente é algo bem útil no helix.</p>
<p>Acabei colocando um server novo agora para ter uma camada de buffer de comandos</p>
<p>Pra isso precisei instalar o <a href="https://github.com/estin/simple-completion-language-server">simple-completion-language-server</a></p>
<p>Ajustar meu languages.toml</p>
<pre><code class="language-toml">[language-server.scls]
command = &quot;simple-completion-language-server&quot;
config = { max_completion_items = 20, snippets_first = false }

[language-server.scls.environment]
RUST_LOG = &quot;debug,simple-completion-langauge-server=debug&quot;
LOG_FILE = &quot;/tmp/completion.log&quot;


[[language]]
name = &quot;python&quot;
roots = [&quot;pyproject.toml&quot;]
language-servers = [&quot;scls&quot;, &quot;pyright&quot;, &quot;ruff&quot;]

[language-server.pyright.config.python.analysis]
typeCheckingMode = &quot;basic&quot;

[language-server.ruff]
command = &quot;ruff-lsp&quot;

[language-server.ruff.config.settings]
args = [&quot;--ignore&quot;, &quot;E501&quot;]

[language.formatter]
command = &quot;blue&quot;


[[language]]
name = &quot;rust&quot;
[language-server.rust-analyzer.config.check]
auto-format = false
language-servers = [&quot;rust-analyzer&quot;, &quot;scls&quot;]
command = &quot;clippy&quot;


[[language]]
name = &quot;vue&quot;
auto-format = true
formatter = { command = &quot;prettier&quot;, args = [&quot;--parser&quot;, &quot;vue&quot;] }


[[language]]
name = &quot;svelte&quot;
auto-format = true
formatter = { command = 'prettier', args = [&quot;--plugin&quot;, &quot;prettier-plugin-svelte&quot;, &quot;--stdin&quot;] }


[[language]]
name = &quot;git-commit&quot;
language-servers = [ &quot;scls&quot; ]


</code></pre>
<p>Ele além disso ele me da alguns snipets do código.</p>
<p>Bom por enquanto ainda não tive muita fluência com o svelte ainda, trabalhei um pouco no meu blog e o auto-complete não estava tão legal, isso é uma coisa que sinto falta que tinha no neovim que são alguns snippets.</p>
<p>Bom esse texto foi mais curto foi muito mais usando que qualquer coisa e a experiência está sendo interessante, convido você testar também ele pois é um editor muito interessante.</p>
<p>Até semana que vem.</p>
<h2><a href="#semana-4" aria-hidden="true" class="anchor" id="semana-4"></a>Semana 4</h2>
<p>Olá, estamos na semana 4 e foi uma jornada muito interessante até aqui.
Bom estou muito mais adaptado ao hélix alem de ainda ter velhos hábitos como apertar yy pra copiar ou DD pra deletar, principalmente quando eu estava querendo fazer algo mais rápido com pressa. Claro que poderia criar um atalho pra fazer esses comandos mas acabei não fazendo.
Acho que no final dessa semana uma coisa que fiquei devendo bastante é ler a documentação com calma, eu meio que fui alterando e lendo e como não reservei um tempo pra ler tudo com calma fica o sentimento que poderia tirar mais do editor.</p>
<h3><a href="#algumas-coisas-que-não-consegui-resolver" aria-hidden="true" class="anchor" id="algumas-coisas-que-não-consegui-resolver"></a>Algumas coisas que não consegui resolver</h3>
<p>Como nem tudo são flores nos casos que abri muitos buffers fica um pouco difícil as vezes de visualizar em qual arquivo você está não explorei a fundo a customização nativa dele, talvez consiga algo melhor do que o default mas, ai foi um problema pra mim.
Outro problema foi o svelte e o tailwind o primeiro ele ate me dava algumas coisas no auto complete porem não tudo, no caso do tailwind o meu problema foi ele não dar autocomplete.
No caso de ele vir com o client lsp pra mim foi uma faca de dois gumes por um lado se você tem clients qie ja esta acostumado a instalar globalmente é muito bom, porem no caso do python por exemplo eu uso cliente diferentes pra projetos diferentes e ai não fica muito legal trabalhar assim.</p>
<h3><a href="#alguns-ajustes" aria-hidden="true" class="anchor" id="alguns-ajustes"></a>Alguns ajustes</h3>
<p>Bom como de costume em editores com arquivos de configuração é legal ver as configurações dos outros pra buscar ideias, no meu caso dei uma olhada no github no meu amigo Bruno Rocha e fiz algumas alterações no meu arquivo do config.toml</p>
<p><code>color-modes = true</code> para cada modo ele muda a cor
<code>gutters = [&quot;diff&quot;, &quot;diagnostics&quot;, &quot;line-numbers&quot;, &quot;spacer&quot;]</code> mostrar algumas diferenças visuais entre as versões de um arquivo</p>
<h3><a href="#conclusão" aria-hidden="true" class="anchor" id="conclusão"></a>Conclusão</h3>
<p>O hélix é um editor muito promissor, segue a filosofia do vim e kakaroune principalmente no segundo. Tenta trazer coisas novas como ter um client lsp já funcional, adicionou o suporte a multi servers que ajudou muito.
Ainda sinto falta DD um sistema de plugins pra conseguir entender algumas coisas e trazer funcionalidades que ele ainda não tem, mas entendo qie ele esta querendo trazer uma experiencia mais &quot;baterias inclusas&quot; do que o neovim e arriscou dizer que é uma boa opção pra iniciantes por ser de algumas formas mais amigável que o neovim e mesmo assim você precisando aprender a configurar seu editor.
Alem disso ainda tem coisas que me fazem continuar com o com como um suporte melhor ao svelte e ter um autocomplete bom pro tailwind. Nos próximos meses devo refazer minha config do zero pro neovim e enquanto isso devo continuar usando o hélix pois ele é muito bom e talvez ate contribuir com ele.
Convido você que quer aprender a usar um editor de terminal experimente o hélix primeiro e depois vá pro vim ele tem uma configuração mais simples e você vai aprender a maior parte da navegação por ele. Não me leve a mal ainda gosto mais do neovim porém vejo que muitos novatos sofrem pra configurar o neovim no dia a dia o hélix é uma boa opção de começar a usar com menos configuração enquanto ajusta seu neovim aos poucos.
Estero que quem acompanhou essa jornada se inspire a conhecer também.</p>
<!-- Content Injected to every content markdown footer -->
]]></content:encoded></item></channel></rss>