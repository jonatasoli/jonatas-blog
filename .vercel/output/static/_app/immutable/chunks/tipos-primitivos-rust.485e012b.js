import{s as Jn,n as Qs}from"./scheduler.94dd1e8a.js";import{S as Kn,i as Qn,g as e,s as p,H as u,h as o,y as c,c as l,j as r,G as k,f as n,k as m,a as t}from"./index.7a40327c.js";function Wn(An){let i,Ws="Rust Descomplicado: Desvendando os Mistérios dos Tipos Básicos",ss,d,Xs=`Olá tudo bem? Hoje quero falar com você sobre os tipos primitivos em rust. Tipos primitivos são em linguagens de programação como Rust, são os tipos básicos de dados que são fornecidos pela linguagem e não são construídos a partir de outros tipos.
Cada tipo tem um tamanho determinado para armazenar suas informações e a partir desses tipos básicos o rust consegue criar os outros tipos que ele usa, e claro você também pode criar seus próprios tipos.`,ns,f,Ys="Mas, sem enrolação vamos ao video.",as,v,$s="Inteiros (Integers)",ts,_,sn=`O primeiro tipo que vamos falar são os tipos inteiros, e sim no plural pois temos vários tipos inteiros.
Os números inteiros são divididos em dois grupos os números inteiros com sinal também chamados de <em>Signed</em> (representa positivos, negativos e zero) e os números inteiros sem sinal também chamados de <em>Unsigned</em> (Representa positivos e zero).`,es,b,nn="Para os inteiros <em>Signed</em> temos:",os,x,an="<li><code>i8</code>: 8 bits que varia entre -128 a 127.</li> <li><code>i16</code>: 16 bits que varia entre -32,768 a 32,767</li> <li><code>i32</code>: 32 bits que varia entre -2,147,483,648 a 2,147,483,647</li> <li><code>i64</code>: 64 bits que varia entre -9,223,372,036,854,775,808 a 9,223,372,036,854,775,807.</li> <li><code>i128</code>: 128 bits que varia entre -170,141,183,460,469,231,731,687,303,715,884,105,728 a 170,141,183,460,469,231,731,687,303,715,884,105,727.</li>",ps,y,ls,Sn=`<code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// i8</span>
    <span class="token keyword">let</span> number_i8<span class="token punctuation">:</span> <span class="token keyword">i8</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"i8: &#123;&#125;"</span><span class="token punctuation">,</span> number_i8<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// i16</span>
    <span class="token keyword">let</span> number_i16<span class="token punctuation">:</span> <span class="token keyword">i16</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">32768</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"i16: &#123;&#125;"</span><span class="token punctuation">,</span> number_i16<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// i32</span>
    <span class="token keyword">let</span> number_i32<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2147483648</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"i32: &#123;&#125;"</span><span class="token punctuation">,</span> number_i32<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// i64</span>
    <span class="token keyword">let</span> number_i64<span class="token punctuation">:</span> <span class="token keyword">i64</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">9223372036854775808</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"i64: &#123;&#125;"</span><span class="token punctuation">,</span> number_i64<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// i128</span>
    <span class="token keyword">let</span> number_i128<span class="token punctuation">:</span> <span class="token keyword">i128</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">170141183460469231731687303715884105728</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"i128: &#123;&#125;"</span><span class="token punctuation">,</span> number_i128<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,cs,w,tn="Para os interior <em>Unsigned</em> temos:",is,C,en="<li><code>u8</code>: 8 bits que varia entre 0 a 255.</li> <li><code>u16</code>: 16 bits que varia entre 0 a 65,535.</li> <li><code>u32</code>: 32 bits que varia entre 0 a 4,294,967,295.</li> <li><code>u64</code>: 64 bits que varia entre 0 a 18,446,744,073,709,551,615.</li> <li><code>u128</code>: 128 bits que varia entre 0 a 340,282,366,920,938,463,463,374,607,431,768,211,455.</li>",us,g,rs,Dn=`<code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// u8</span>
    <span class="token keyword">let</span> number_u8<span class="token punctuation">:</span> <span class="token keyword">u8</span> <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"u8: &#123;&#125;"</span><span class="token punctuation">,</span> number_u8<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// u16</span>
    <span class="token keyword">let</span> number_u16<span class="token punctuation">:</span> <span class="token keyword">u16</span> <span class="token operator">=</span> <span class="token number">65535</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"u16: &#123;&#125;"</span><span class="token punctuation">,</span> number_u16<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// u32</span>
    <span class="token keyword">let</span> number_u32<span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token operator">=</span> <span class="token number">4294967295</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"u32: &#123;&#125;"</span><span class="token punctuation">,</span> number_u32<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// u64</span>
    <span class="token keyword">let</span> number_u64<span class="token punctuation">:</span> <span class="token keyword">u64</span> <span class="token operator">=</span> <span class="token number">18446744073709551615</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"u64: &#123;&#125;"</span><span class="token punctuation">,</span> number_u64<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// u128</span>
    <span class="token keyword">let</span> number_u128<span class="token punctuation">:</span> <span class="token keyword">u128</span> <span class="token operator">=</span> <span class="token number">340282366920938463463374607431768211455</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"u128: &#123;&#125;"</span><span class="token punctuation">,</span> number_u128<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ks,q,on="Fora isso temos o tipo <code>usize</code> e <code>isize</code> que representam palavras no formato do processador que está sendo usado ou seja 32 bits pra processadores de 32 bits e 64 bits para processadores de 64 bits.",ms,P,pn="O uso de <code>isize</code> é útil quando você está lidando com índices de coleções ou quando deseja garantir que seu código seja eficiente em diferentes arquiteturas sem ter que se preocupar com o tamanho exato do inteiro.",ds,H,ln="Suponha que você queira imprimir o tamanho de um vetor em termos de número de elementos, e para isso, você pode usar o tipo <code>isize</code> para garantir portabilidade. Aqui está um exemplo:",fs,T,cn="rust",vs,L,_s,Fn=`<code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> vetor <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// Usando .len() para obter o tamanho do vetor, que retorna um usize.</span>
    <span class="token comment">// Convertendo para isize para impressão e operações posteriores.</span>
    <span class="token keyword">let</span> tamanho<span class="token punctuation">:</span> <span class="token keyword">isize</span> <span class="token operator">=</span> vetor<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">isize</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"O tamanho do vetor é: &#123;&#125;"</span><span class="token punctuation">,</span> tamanho<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Aqui, apenas para ilustrar, vamos fazer uma operação simples.</span>
    <span class="token keyword">let</span> novo_tamanho <span class="token operator">=</span> tamanho <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Se adicionar 10, o novo tamanho é: &#123;&#125;"</span><span class="token punctuation">,</span> novo_tamanho<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</code>`,bs,M,un="Neste exemplo, usamos <code>isize</code> para representar o tamanho do vetor. Ao fazer isso, garantimos que o código funcione tanto em arquiteturas de 32 bits quanto de 64 bits, adaptando-se automaticamente ao tamanho da palavra do sistema.",xs,z,rn="Um parenteses:",ys,E,kn="Os termos “32 bits” e “64 bits” referem-se ao tamanho da palavra de um processador, o que, por sua vez, influencia o tamanho máximo de dados que o processador pode processar em uma única operação e a quantidade máxima de memória RAM que o sistema operacional pode endereçar.",ws,h,mn="Ponto Flutuante (Floating-Point)",Cs,j,dn="Para pontos flutuantes vamos ter:",gs,R,fn="<li><code>f32</code>: Ponto flutuante de precisão simples (32 bits).</li> <li><code>f64</code>: Ponto flutuante de precisão dupla (64 bits). É o padrão para números decimais em Rust.</li>",qs,O,vn="Em computação, os termos “precisão simples” e “precisão dupla” referem-se ao número de bits usados para representar números de ponto flutuante em um computador. No contexto do Rust e da maioria das linguagens de programação, esses termos são geralmente associados aos tipos <code>f32</code> e <code>f64</code>, respectivamente.",Ps,U,_n="<li><p><strong>Precisão Simples (<code>f32</code>)</strong>:</p> <ul><li>Utiliza 32 bits para representar um número de ponto flutuante.</li> <li>Oferece uma precisão de aproximadamente 7 dígitos decimais significativos.</li> <li>É mais eficiente em termos de uso de memória e pode ser mais rápido em algumas operações devido ao tamanho menor.</li></ul></li>",Hs,A,Ts,Bn=`<code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Exemplo com f32</span>
    <span class="token keyword">let</span> numero_f32<span class="token punctuation">:</span> <span class="token keyword">f32</span> <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span>  <span class="token comment">// Aproximadamente Pi</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Valor usando f32: &#123;&#125;"</span><span class="token punctuation">,</span> numero_f32<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Outro exemplo com f32</span>
    <span class="token keyword">let</span> outro_f32<span class="token punctuation">:</span> <span class="token keyword">f32</span> <span class="token operator">=</span> <span class="token number">123.456789</span><span class="token punctuation">;</span>  <span class="token comment">// Aproximadamente 123.456789</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Outro valor usando f32: &#123;&#125;"</span><span class="token punctuation">,</span> outro_f32<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Ls,S,bn="<li><p><strong>Precisão Dupla (<code>f64</code>)</strong>:</p> <ul><li>Utiliza 64 bits para representar um número de ponto flutuante.</li> <li>Oferece uma precisão muito maior, aproximadamente 15 a 17 dígitos decimais significativos.</li> <li>Por ser mais preciso, é geralmente preferido em aplicações que exigem alta precisão, como cálculos científicos ou financeiros que envolvem números muito grandes ou muito pequenos, ou quando se deseja evitar erros acumulados em cálculos longos.</li></ul></li>",Ms,D,zs,In=`<code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Exemplo com f64</span>
    <span class="token keyword">let</span> numero_f64<span class="token punctuation">:</span> <span class="token keyword">f64</span> <span class="token operator">=</span> <span class="token number">3.141592653589793</span><span class="token punctuation">;</span>  <span class="token comment">// Valor mais preciso de Pi</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Valor usando f64: &#123;&#125;"</span><span class="token punctuation">,</span> numero_f64<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Outro exemplo com f64</span>
    <span class="token keyword">let</span> outro_f64<span class="token punctuation">:</span> <span class="token keyword">f64</span> <span class="token operator">=</span> <span class="token number">123456789.987654321</span><span class="token punctuation">;</span>  <span class="token comment">// Número grande com precisão dupla</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Outro valor usando f64: &#123;&#125;"</span><span class="token punctuation">,</span> outro_f64<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Es,F,xn="Caractere (Character)",hs,B,yn="Para representar um caractere temos o tipo char e é usado para representar 1 caractere. Temos os tipos str e String mas, eles são usados para representar um grupo de caracteres o tipo primitivo é apenas o char.",js,I,wn="O char armazena 4 bytes e é usado para representar um caractere Unicode.",Rs,N,Os,Nn=`<code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> letra <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">;</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Essa é a letra: &#123;&#125;"</span><span class="token punctuation">,</span> letra<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Us,V,Cn="E o que é Unicode?",As,G,gn="Unicode é um padrão de codificação de caracteres universal que visa definir um único código numérico para cada caractere de qualquer sistema de escrita do mundo. A ideia por trás do Unicode é criar uma forma de representação padronizada para caracteres de todos os idiomas e símbolos usados globalmente.",Ss,Z,qn="Um exemplo armazenando o kanji <em>Megami</em> do japones:",Ds,J,Fs,Vn=`<code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> megane <span class="token operator">=</span> <span class="token lifetime-annotation symbol">'u</span><span class="token punctuation">&#123;</span>76EE<span class="token punctuation">&#125;</span>'<span class="token punctuation">;</span> 
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> megane<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Bs,K,Pn="Um exemplo armazenando um emoji:",Is,Q,Ns,Gn=`<code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> emoji_sorriso <span class="token operator">=</span> <span class="token lifetime-annotation symbol">'u</span><span class="token punctuation">&#123;</span>1F603<span class="token punctuation">&#125;</span>'<span class="token punctuation">;</span> 
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> emoji_sorriso<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</code>`,Vs,W,Hn="Booleano (Boolean)",Gs,X,Tn="O tipo booleano é usado para presentar como o nome já diz um valor booleano. Sendo <code>true</code> para verdadeiro e <code>false</code>  para falso.",Zs,Y,Js,Zn=`<code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> verdadeiro <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> falso <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Verdadeiro -> &#123;&#125;, Falso -> &#123;&#125;"</span><span class="token punctuation">,</span> verdadeiro<span class="token punctuation">,</span> falso<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
</code>`,Ks,$,Ln="Bom o post de hoje é isso nos vemos na próxima semana.";return{c(){i=e("h1"),i.textContent=Ws,ss=p(),d=e("p"),d.textContent=Xs,ns=p(),f=e("p"),f.textContent=Ys,as=p(),v=e("h2"),v.textContent=$s,ts=p(),_=e("p"),_.innerHTML=sn,es=p(),b=e("p"),b.innerHTML=nn,os=p(),x=e("ul"),x.innerHTML=an,ps=p(),y=e("pre"),ls=new u(!1),cs=p(),w=e("p"),w.innerHTML=tn,is=p(),C=e("ul"),C.innerHTML=en,us=p(),g=e("pre"),rs=new u(!1),ks=p(),q=e("p"),q.innerHTML=on,ms=p(),P=e("p"),P.innerHTML=pn,ds=p(),H=e("p"),H.innerHTML=ln,fs=p(),T=e("p"),T.textContent=cn,vs=p(),L=e("pre"),_s=new u(!1),bs=p(),M=e("p"),M.innerHTML=un,xs=p(),z=e("p"),z.textContent=rn,ys=p(),E=e("p"),E.textContent=kn,ws=p(),h=e("h2"),h.textContent=mn,Cs=p(),j=e("p"),j.textContent=dn,gs=p(),R=e("ul"),R.innerHTML=fn,qs=p(),O=e("p"),O.innerHTML=vn,Ps=p(),U=e("ol"),U.innerHTML=_n,Hs=p(),A=e("pre"),Ts=new u(!1),Ls=p(),S=e("ol"),S.innerHTML=bn,Ms=p(),D=e("pre"),zs=new u(!1),Es=p(),F=e("h2"),F.textContent=xn,hs=p(),B=e("p"),B.textContent=yn,js=p(),I=e("p"),I.textContent=wn,Rs=p(),N=e("pre"),Os=new u(!1),Us=p(),V=e("h3"),V.textContent=Cn,As=p(),G=e("p"),G.textContent=gn,Ss=p(),Z=e("p"),Z.innerHTML=qn,Ds=p(),J=e("pre"),Fs=new u(!1),Bs=p(),K=e("p"),K.textContent=Pn,Is=p(),Q=e("pre"),Ns=new u(!1),Vs=p(),W=e("h2"),W.textContent=Hn,Gs=p(),X=e("p"),X.innerHTML=Tn,Zs=p(),Y=e("pre"),Js=new u(!1),Ks=p(),$=e("p"),$.textContent=Ln,this.h()},l(s){i=o(s,"H1",{"data-svelte-h":!0}),c(i)!=="svelte-6uycvq"&&(i.textContent=Ws),ss=l(s),d=o(s,"P",{"data-svelte-h":!0}),c(d)!=="svelte-1f2pkip"&&(d.textContent=Xs),ns=l(s),f=o(s,"P",{"data-svelte-h":!0}),c(f)!=="svelte-1mb4u7j"&&(f.textContent=Ys),as=l(s),v=o(s,"H2",{"data-svelte-h":!0}),c(v)!=="svelte-1bh9d1t"&&(v.textContent=$s),ts=l(s),_=o(s,"P",{"data-svelte-h":!0}),c(_)!=="svelte-1g38ixo"&&(_.innerHTML=sn),es=l(s),b=o(s,"P",{"data-svelte-h":!0}),c(b)!=="svelte-1paavdk"&&(b.innerHTML=nn),os=l(s),x=o(s,"UL",{"data-svelte-h":!0}),c(x)!=="svelte-qewkw2"&&(x.innerHTML=an),ps=l(s),y=o(s,"PRE",{class:!0});var a=r(y);ls=k(a,!1),a.forEach(n),cs=l(s),w=o(s,"P",{"data-svelte-h":!0}),c(w)!=="svelte-91vr6c"&&(w.innerHTML=tn),is=l(s),C=o(s,"UL",{"data-svelte-h":!0}),c(C)!=="svelte-1pcmpxx"&&(C.innerHTML=en),us=l(s),g=o(s,"PRE",{class:!0});var Mn=r(g);rs=k(Mn,!1),Mn.forEach(n),ks=l(s),q=o(s,"P",{"data-svelte-h":!0}),c(q)!=="svelte-c4u30w"&&(q.innerHTML=on),ms=l(s),P=o(s,"P",{"data-svelte-h":!0}),c(P)!=="svelte-1j2erb9"&&(P.innerHTML=pn),ds=l(s),H=o(s,"P",{"data-svelte-h":!0}),c(H)!=="svelte-mb1ni1"&&(H.innerHTML=ln),fs=l(s),T=o(s,"P",{"data-svelte-h":!0}),c(T)!=="svelte-1ll7imy"&&(T.textContent=cn),vs=l(s),L=o(s,"PRE",{class:!0});var zn=r(L);_s=k(zn,!1),zn.forEach(n),bs=l(s),M=o(s,"P",{"data-svelte-h":!0}),c(M)!=="svelte-iwqzpu"&&(M.innerHTML=un),xs=l(s),z=o(s,"P",{"data-svelte-h":!0}),c(z)!=="svelte-3p8cac"&&(z.textContent=rn),ys=l(s),E=o(s,"P",{"data-svelte-h":!0}),c(E)!=="svelte-1b7xxbv"&&(E.textContent=kn),ws=l(s),h=o(s,"H2",{"data-svelte-h":!0}),c(h)!=="svelte-1bk1bf4"&&(h.textContent=mn),Cs=l(s),j=o(s,"P",{"data-svelte-h":!0}),c(j)!=="svelte-oo5mmn"&&(j.textContent=dn),gs=l(s),R=o(s,"UL",{"data-svelte-h":!0}),c(R)!=="svelte-1ieg8r7"&&(R.innerHTML=fn),qs=l(s),O=o(s,"P",{"data-svelte-h":!0}),c(O)!=="svelte-1uxqobc"&&(O.innerHTML=vn),Ps=l(s),U=o(s,"OL",{"data-svelte-h":!0}),c(U)!=="svelte-shr34t"&&(U.innerHTML=_n),Hs=l(s),A=o(s,"PRE",{class:!0});var En=r(A);Ts=k(En,!1),En.forEach(n),Ls=l(s),S=o(s,"OL",{"data-svelte-h":!0}),c(S)!=="svelte-118mpt5"&&(S.innerHTML=bn),Ms=l(s),D=o(s,"PRE",{class:!0});var hn=r(D);zs=k(hn,!1),hn.forEach(n),Es=l(s),F=o(s,"H2",{"data-svelte-h":!0}),c(F)!=="svelte-1lsqokc"&&(F.textContent=xn),hs=l(s),B=o(s,"P",{"data-svelte-h":!0}),c(B)!=="svelte-t8b66c"&&(B.textContent=yn),js=l(s),I=o(s,"P",{"data-svelte-h":!0}),c(I)!=="svelte-14d8d8l"&&(I.textContent=wn),Rs=l(s),N=o(s,"PRE",{class:!0});var jn=r(N);Os=k(jn,!1),jn.forEach(n),Us=l(s),V=o(s,"H3",{"data-svelte-h":!0}),c(V)!=="svelte-xg7lvw"&&(V.textContent=Cn),As=l(s),G=o(s,"P",{"data-svelte-h":!0}),c(G)!=="svelte-17q2fw6"&&(G.textContent=gn),Ss=l(s),Z=o(s,"P",{"data-svelte-h":!0}),c(Z)!=="svelte-1tigajg"&&(Z.innerHTML=qn),Ds=l(s),J=o(s,"PRE",{class:!0});var Rn=r(J);Fs=k(Rn,!1),Rn.forEach(n),Bs=l(s),K=o(s,"P",{"data-svelte-h":!0}),c(K)!=="svelte-1mlvwno"&&(K.textContent=Pn),Is=l(s),Q=o(s,"PRE",{class:!0});var On=r(Q);Ns=k(On,!1),On.forEach(n),Vs=l(s),W=o(s,"H2",{"data-svelte-h":!0}),c(W)!=="svelte-1lasxjg"&&(W.textContent=Hn),Gs=l(s),X=o(s,"P",{"data-svelte-h":!0}),c(X)!=="svelte-1aavf6f"&&(X.innerHTML=Tn),Zs=l(s),Y=o(s,"PRE",{class:!0});var Un=r(Y);Js=k(Un,!1),Un.forEach(n),Ks=l(s),$=o(s,"P",{"data-svelte-h":!0}),c($)!=="svelte-jnp7sv"&&($.textContent=Ln),this.h()},h(){ls.a=null,m(y,"class","language-rust"),rs.a=null,m(g,"class","language-rust"),_s.a=null,m(L,"class","language-rust"),Ts.a=null,m(A,"class","language-rust"),zs.a=null,m(D,"class","language-rust"),Os.a=null,m(N,"class","language-rust"),Fs.a=null,m(J,"class","language-rust"),Ns.a=null,m(Q,"class","language-rust"),Js.a=null,m(Y,"class","language-rust")},m(s,a){t(s,i,a),t(s,ss,a),t(s,d,a),t(s,ns,a),t(s,f,a),t(s,as,a),t(s,v,a),t(s,ts,a),t(s,_,a),t(s,es,a),t(s,b,a),t(s,os,a),t(s,x,a),t(s,ps,a),t(s,y,a),ls.m(Sn,y),t(s,cs,a),t(s,w,a),t(s,is,a),t(s,C,a),t(s,us,a),t(s,g,a),rs.m(Dn,g),t(s,ks,a),t(s,q,a),t(s,ms,a),t(s,P,a),t(s,ds,a),t(s,H,a),t(s,fs,a),t(s,T,a),t(s,vs,a),t(s,L,a),_s.m(Fn,L),t(s,bs,a),t(s,M,a),t(s,xs,a),t(s,z,a),t(s,ys,a),t(s,E,a),t(s,ws,a),t(s,h,a),t(s,Cs,a),t(s,j,a),t(s,gs,a),t(s,R,a),t(s,qs,a),t(s,O,a),t(s,Ps,a),t(s,U,a),t(s,Hs,a),t(s,A,a),Ts.m(Bn,A),t(s,Ls,a),t(s,S,a),t(s,Ms,a),t(s,D,a),zs.m(In,D),t(s,Es,a),t(s,F,a),t(s,hs,a),t(s,B,a),t(s,js,a),t(s,I,a),t(s,Rs,a),t(s,N,a),Os.m(Nn,N),t(s,Us,a),t(s,V,a),t(s,As,a),t(s,G,a),t(s,Ss,a),t(s,Z,a),t(s,Ds,a),t(s,J,a),Fs.m(Vn,J),t(s,Bs,a),t(s,K,a),t(s,Is,a),t(s,Q,a),Ns.m(Gn,Q),t(s,Vs,a),t(s,W,a),t(s,Gs,a),t(s,X,a),t(s,Zs,a),t(s,Y,a),Js.m(Zn,Y),t(s,Ks,a),t(s,$,a)},p:Qs,i:Qs,o:Qs,d(s){s&&(n(i),n(ss),n(d),n(ns),n(f),n(as),n(v),n(ts),n(_),n(es),n(b),n(os),n(x),n(ps),n(y),n(cs),n(w),n(is),n(C),n(us),n(g),n(ks),n(q),n(ms),n(P),n(ds),n(H),n(fs),n(T),n(vs),n(L),n(bs),n(M),n(xs),n(z),n(ys),n(E),n(ws),n(h),n(Cs),n(j),n(gs),n(R),n(qs),n(O),n(Ps),n(U),n(Hs),n(A),n(Ls),n(S),n(Ms),n(D),n(Es),n(F),n(hs),n(B),n(js),n(I),n(Rs),n(N),n(Us),n(V),n(As),n(G),n(Ss),n(Z),n(Ds),n(J),n(Bs),n(K),n(Is),n(Q),n(Vs),n(W),n(Gs),n(X),n(Zs),n(Y),n(Ks),n($))}}}const $n={postId:11,title:"Rust Descomplicado: Desvendando os mistérios dos tipos básicos",imgUrl:"/post-images/rust-tipos-primitivos.png",youtubeId:"dgtzHc5z80g",summary:"Neste artigo, vamos explorar os tipos primitivos de Rust, um dos blocos fundamentais para trabalhar nesta linguagem.",publishedAt:"2024-01-12T00:00:00.000Z"};class sa extends Kn{constructor(i){super(),Qn(this,i,null,Wn,Jn,{})}}export{sa as default,$n as metadata};
